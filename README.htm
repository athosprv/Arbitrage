<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Problem #6</title>
</head>

<body>

<h1>Arbitrage</h1>

<h2><u>Arbitrage:</u></h2>
<p><em>Arbitrage</em> is the trading of one currency for another with the hopes 
of taking advantage of small differences in conversion rates among several 
currencies in order to achieve a profit. For example, if $1.00 in U.S. currency 
buys 0.7 British pounds currency, £1 in British currency buys 9.5 French francs, 
and 1 French franc buys 0.16 in U.S. dollars, then an arbitrage trader can start 
with $1.00 and earn</p>
<p>&nbsp;&nbsp;&nbsp; 1 x 0.7 x 9.5 x 0.16 = 1.064 thus earning a profit of 6.4 percent. </p>
<p>You will write a program that determines whether a sequence of currency 
exchanges can yield a profit as described above. </p>
<p>To result in successful arbitrage, a sequence of exchanges must begin and end 
with the same currency, but any starting currency may be considered.&nbsp; Please pay 
close attention to the requirements described in the Input and Output sections 
of this write up.&nbsp; In particular, you will be allowed a limited number of 
exchanges, the total profit must be at least 1%, and you are allowed to repeat 
currencies multiple times as along as the total number of exchanges does not 
exceed the required limit.</p>
<p>&nbsp;</p>
<h2><u>Input:</u></h2>
<p>The input consists of one or more conversion tables. You must solve the 
arbitrage problem for each of the tables in the input.&nbsp; </p>
<p>Each table is preceded by an integer <i>n</i> on a line by itself giving the 
dimensions of the table (the total number of currencies). The maximum dimension 
is 20; the minimum dimension is 2.&nbsp; Because each problem begins with a 
number indicating the size of the table that follows, this input does <u><b>not</b></u> 
have blank lines between problems.</p>
<p>The table then follows with one table row per line.&nbsp; Each row contains the 
conversions factors for converting <u><b>from</b></u> the currency of the 
country in that row.&nbsp; In other words, the table entry in row <i>i</i>, column <i>
j</i> contains the conversion factor for converting from currency <i>i </i>to 
currency <i>j</i> (the amount of currency <i>j</i> that you would get for 1 unit 
of currency <i>i</i>).</p>
<p>Thus each table consists of <i>n</i>+1 lines in the input file: 1 line 
containing the integer <i>n</i> immediately followed <i>n</i> lines representing 
the <i>n</i> rows of the table.&nbsp; Each table row will have <i>n</i> real numbers 
(Java doubles) separated from each other by spaces.&nbsp; <u>It is imperative that 
after reading the single number <i>n</i> on the first line, you only read the 
next <i>n</i> lines which correspond to the rows of the table.</u>&nbsp; If you try 
reading past the end of the table before answering that problem, your code will 
block and time out.&nbsp; Once you send your answer, you should continue to read in 
the next problem (and answer it).&nbsp; </p>
<h2><u>Output:</u></h2>
<p>For each table in the input you must determine whether a sequence of 
exchanges beginning at some currency and ending at the same currency exists that 
results in a profit of more than 1 percent (0.01). If a sequence exists you must 
print the sequence of exchanges that results in a profit. If there is more than 
one sequence that results in a profit of more than 1 percent you must print a 
sequence of minimal length, i.e., one of the sequences that uses the fewest 
exchanges of currencies to yield a profit of more than 1 percent.</p>
<p>Because the IRS (United States Internal Revenue Service) notices lengthy 
transaction sequences, all profiting sequences must consist of <i>n</i> or fewer 
transactions where <i>n</i> is the dimension of the table giving conversion 
rates. The sequence 1 2 1 represents two conversions. </p>
<p>If a profiting sequence exists you must print the sequence of exchanges that 
results in a profit. The sequence is printed as a sequence of integers with the 
integer <i>i</i> representing the <i>i<sup>th</sup> </i>line of the conversion 
table (country <i>i</i>). The first integer in the sequence is the country from 
which the profiting sequence starts. This integer also ends the sequence.&nbsp; <u>
<b>Important:</b></u> The first row in the table is called row 1.&nbsp; This is 
different from the way Java usually numbers arrays.</p>
<p>If no profiting sequence of <i>n</i> or fewer transactions exists, then the 
line </p>
<pre>none</pre>
should be printed. 
<p>&nbsp;</p>
<h2><u>End of all Input:</u></h2>
<p>The end of all input will be marked by an additional blank line a blank line.&nbsp; 
Note this this blank line would come after a table description, when you would 
normally be looking for the size of the next table.</p>
<h2><u>Example:</u></h2>
<p>For example, the input might look like:</p>
<pre><font size="3">3
1.0 1.2 .89
.88 1.0 5.1
1.1 0.15 1.0
4
1.0 3.1 0.0023 0.35
0.21 1.0 0.00353 8.13 
200 180.559 1.0 10.339
2.11 0.089 0.06111 1.0
2
1.0 2.0
0.45 1.0</font>
<font color="#FF0000">&lt;blank line here&gt;</font>

<font face="Times New Roman" size="3">Which contains a single blank line at the end (after the line 0.45 1.0).  A possible valid output would be:</font></pre>
<pre><font size="3">1 2 1
1 2 4 1
none</font>
&nbsp;</pre>
<h2><u>Correctness:</u></h2>
<p>Note that in the example above, 1 2 4 1 is a correct solution for the second 
table because:</p>
<ol>
	<li>The total number of conversions (3) is less than or equal to the number 
	of currencies/dimensions of the table (4) 
	</li>
	<li>The product of the conversions involved is greater than 1.01&nbsp; (3.1 * 
	8.13 * 2.11 = 53.17833).&nbsp; (Note that in practice you never get an arbitrage 
	situation that yields 5300% profit like this). 
	</li>
	<li>There is no other sequence of conversions that is shorter (contains 
	fewer than 3 conversions) and still yields a product that is greater than 
	1.01.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>